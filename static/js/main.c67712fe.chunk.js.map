{"version":3,"sources":["Statbar.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Statbar","props","canvas","React","createRef","value","ctx","this","current","getContext","clearRect","fillStyle","fillRect","style","display","justifyContent","margin","fontSize","name","ref","width","height","border","Component","Card","powerstats","slug","id","className","alignSelf","alt","src","Object","keys","map","key","i","CardList","flexWrap","alignItems","robots","user","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","overflow","children","App","onSearchChange","event","setState","target","state","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c67712fe.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\n\nclass Statbar extends React.Component {  \n\n  constructor(props){\n  \tsuper();\n  \tthis.canvas = React.createRef();\n  }\t\n\n  fillRect(value){\n  \tconst ctx = this.canvas.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, 100, 5)\n    ctx.fillStyle = \"#0000FF\"\n    ctx.fillRect(0, 0, this.props.value, 5)\n  }\n\n  componentDidUpdate(props){\n    this.fillRect(this.props.value);\n  }\n\n  componentDidMount(props){\n  \tthis.fillRect(this.props.value);\n  }\n\n  render(props) {\n    return(\n      \t<div style={{display: 'flex', justifyContent: 'space-between', margin: '5px'}}>\n      \t\t<p style={{fontSize: 10}}> {this.props.name} </p>\n        \t<canvas ref={this.canvas} width={100} height={5} style={{border: '1px solid black'}}/>\n      \t</div>\n    )\n  }\n}\n\nexport default Statbar;","import React from 'react';\nimport Statbar from './Statbar'\nimport tachyons from 'tachyons'\n\nconst Card = ({name, powerstats, id, slug}) => {\n\treturn (\n\t\t<div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5' style={{width: '300px', height: '400px', alignSelf: 'center'}}>\n\t\t\t<img alt={name} src={'https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/images/sm/' +slug +'.jpg'} style={{width: '100px', height: '100px'}}/>\n\t\t\t<div>\n\t\t\t\t<h3> {name} </h3>\n\t\t\t\t {Object.keys(powerstats).map((key, i) => \n\t\t\t\t <Statbar value={powerstats[key]} name={key} />)\n         \t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './Card';\n//import { robots } from './Robots'\n\nclass CardList extends Component {\n\trender(props){\n\t\treturn (\n\t\t<div style={{display: 'flex',\n  \t\t\tflexWrap: 'wrap',\n  \t\t\talignItems: 'center',\n  \t\t\tjustifyContent: 'space-around'}}>\n\n         \t{this.props.robots.map((user, i) => \n\t\t\t\t <Card \n\t\t\t\t \tkey={i} \n\t\t\t\t \tid={this.props.robots[i].id} \n\t\t\t\t \tpowerstats={this.props.robots[i].powerstats} \n\t\t\t\t \tname={this.props.robots[i].name} \n\t\t\t\t \tslug={this.props.robots[i].slug} \n\t\t\t\t />)\n         \t} \n        </div>\n        )\n\t}\n\t\n}\n\nexport default CardList;","import React from 'react';\nimport tachyons from 'tachyons'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search for your hero'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","\nimport React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}